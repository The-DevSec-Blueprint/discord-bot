name: Publish ECR Docker Images

on:
    workflow_call:

jobs:
  publish_youtube_subscriber:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Check if there are changes in lambdas/youtube-subscriber
        id: check_changes
        run: |
          if git rev-parse --verify HEAD >/dev/null 2>&1; then
            # Check against HEAD if this is not the first commit
            if git diff --quiet HEAD -- 'lambdas/youtube-subscriber/**'; then
              echo "No changes detected in lambdas/youtube-subscriber"
              echo "changes=false" >> $GITHUB_ENV
            else
              echo "Changes detected in lambdas/youtube-subscriber"
              echo "changes=true" >> $GITHUB_ENV
            fi
          else
            # Handle the initial commit case
            if git ls-files -- 'lambdas/youtube-subscriber/**' | grep -q .; then
              echo "Changes detected in lambdas/youtube-subscriber (initial commit)"
              echo "changes=true" >> $GITHUB_ENV
            else
              echo "No changes detected in lambdas/youtube-subscriber (initial commit)"
              echo "changes=false" >> $GITHUB_ENV
            fi
          fi

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Login to Amazon ECR
        run: aws ecr get-login-password --region ${{ secrets.AWS_REGION }} | docker login --username AWS --password-stdin ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com

      - name: Build Docker image
        working-directory: ./lambdas/youtube-subscriber
        run: docker build -t ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/discord-bot-youtube-subscriber-image:latest -f Dockerfile .

      - name: Push Docker image to ECR
        run: docker push ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/discord-bot-youtube-subscriber-image:latest
  publish_security_newsletter:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Check if there are changes in lambdas/security-newsletter
        id: check_changes
        run: |
          if git rev-parse --verify HEAD >/dev/null 2>&1; then
            # Check against HEAD if this is not the first commit
            if git diff --quiet HEAD -- 'lambdas/security-newsletter/**'; then
              echo "No changes detected in lambdas/security-newsletter"
              echo "changes=false" >> $GITHUB_ENV
            else
              echo "Changes detected in lambdas/security-newsletter"
              echo "changes=true" >> $GITHUB_ENV
            fi
          else
            # Handle the initial commit case
            if git ls-files -- 'lambdas/security-newsletter/**' | grep -q .; then
              echo "Changes detected in lambdas/security-newsletter (initial commit)"
              echo "changes=true" >> $GITHUB_ENV
            else
              echo "No changes detected in lambdas/security-newsletter (initial commit)"
              echo "changes=false" >> $GITHUB_ENV
            fi
          fi

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Login to Amazon ECR
        run: aws ecr get-login-password --region ${{ secrets.AWS_REGION }} | docker login --username AWS --password-stdin ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com

      - name: Build Docker image
        working-directory: ./lambdas/security-newsletter
        run: docker build -t ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/discord-bot-security-newsletter-image:latest -f Dockerfile .

      - name: Push Docker image to ECR
        run: docker push ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/discord-bot-security-newsletter-image:latest
  publish_discord_bot:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Check if there are changes in lambdas/discord-bot
        id: check_changes
        run: |
          if git rev-parse --verify HEAD >/dev/null 2>&1; then
            # Check against HEAD if this is not the first commit
            if git diff --quiet HEAD -- 'lambdas/discord-bot/**'; then
              echo "No changes detected in lambdas/discord-bot"
              echo "changes=false" >> $GITHUB_ENV
            else
              echo "Changes detected in lambdas/discord-bot"
              echo "changes=true" >> $GITHUB_ENV
            fi
          else
            # Handle the initial commit case
            if git ls-files -- 'lambdas/discord-bot/**' | grep -q .; then
              echo "Changes detected in lambdas/discord-bot (initial commit)"
              echo "changes=true" >> $GITHUB_ENV
            else
              echo "No changes detected in lambdas/discord-bot (initial commit)"
              echo "changes=false" >> $GITHUB_ENV
            fi
          fi

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Login to Amazon ECR
        run: aws ecr get-login-password --region ${{ secrets.AWS_REGION }} | docker login --username AWS --password-stdin ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com

      - name: Build Docker image
        working-directory: ./lambdas/discord-bot
        run: docker build -t ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/discord-bot-image:latest -f Dockerfile .

      - name: Push Docker image to ECR
        run: docker push ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/discord-bot-image:latest
